// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Salky.Domain.Contexts;

#nullable disable

namespace Salky.Domain.Migrations
{
    [DbContext(typeof(SalkyDbContext))]
    [Migration("20220619093837_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Salky.Domain.Models.FriendModels.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BecameFriendsTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FriendRequestFlag")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<Guid>("RequestedToId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("RequestedById");

                    b.HasIndex("RequestedToId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Salky.Domain.Models.FriendModels.FriendMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.ToTable("MessagesFriend");
                });

            modelBuilder.Entity("Salky.Domain.Models.GenericsModels.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Salky.Domain.Models.GenericsModels.Transference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Transference");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.CallPermisions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEntryInCall")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanMuteHeadPhoneOfOtherUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanMuteMicrofoneOfOtherUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSeeCall")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanUnMuteHeadPhoneOfOtherUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanUnMuteMicrofoneOfOtherUser")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupRoleId")
                        .IsUnique();

                    b.ToTable("CallPermisions");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.ChatPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanDeleteOtherUserMessages")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanReadMessage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSendMessage")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupRoleId")
                        .IsUnique();

                    b.ToTable("ChatPermissions");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GroupConfig");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsUsers");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanChangeOtherUserRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditGroupName")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEditGroupPicture")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanInviteOtherUsers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanRemoveOtherUsers")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupRoleId")
                        .IsUnique();

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hierarchy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleName", "GroupId")
                        .IsUnique();

                    b.ToTable("GroupsRoles");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.MessageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId", "GroupId");

                    b.ToTable("MessagesGroup");
                });

            modelBuilder.Entity("Salky.Domain.Models.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassWordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Salky.Domain.Models.FriendModels.Friend", b =>
                {
                    b.HasOne("Salky.Domain.Models.UserModels.User", "RequestedBy")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Salky.Domain.Models.UserModels.User", "RequestedTo")
                        .WithMany("ReceievedFriendRequests")
                        .HasForeignKey("RequestedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedBy");

                    b.Navigation("RequestedTo");
                });

            modelBuilder.Entity("Salky.Domain.Models.FriendModels.FriendMessage", b =>
                {
                    b.HasOne("Salky.Domain.Models.FriendModels.Friend", "Friend")
                        .WithMany("Messages")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("Salky.Domain.Models.GenericsModels.Notification", b =>
                {
                    b.HasOne("Salky.Domain.Models.UserModels.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Salky.Domain.Models.GenericsModels.Transference", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.Group", null)
                        .WithMany("TransfersRecords")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.CallPermisions", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.GroupRole", "GroupRole")
                        .WithOne("CallPermisions")
                        .HasForeignKey("Salky.Domain.Models.GroupModels.CallPermisions", "GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.ChatPermissions", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.GroupRole", "GroupRole")
                        .WithOne("ChatPermissions")
                        .HasForeignKey("Salky.Domain.Models.GroupModels.ChatPermissions", "GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.Group", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.GroupConfig", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Salky.Domain.Models.UserModels.User", "Owner")
                        .WithMany("OwnerGroups")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Config");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupMember", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Salky.Domain.Models.GroupModels.GroupRole", "Role")
                        .WithMany("MemberWithRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Salky.Domain.Models.UserModels.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupPermissions", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.GroupRole", "GroupRole")
                        .WithOne("GroupPermissions")
                        .HasForeignKey("Salky.Domain.Models.GroupModels.GroupPermissions", "GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupRole", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.MessageGroup", b =>
                {
                    b.HasOne("Salky.Domain.Models.GroupModels.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Salky.Domain.Models.FriendModels.Friend", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.Group", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("TransfersRecords");
                });

            modelBuilder.Entity("Salky.Domain.Models.GroupModels.GroupRole", b =>
                {
                    b.Navigation("CallPermisions")
                        .IsRequired();

                    b.Navigation("ChatPermissions")
                        .IsRequired();

                    b.Navigation("GroupPermissions")
                        .IsRequired();

                    b.Navigation("MemberWithRoles");
                });

            modelBuilder.Entity("Salky.Domain.Models.UserModels.User", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Notifications");

                    b.Navigation("OwnerGroups");

                    b.Navigation("ReceievedFriendRequests");

                    b.Navigation("SentFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
